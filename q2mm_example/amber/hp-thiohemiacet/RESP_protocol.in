-----------------------------------------------------------------------------------------
RESP Protocol: input to generate resp charges using antechamber and Gaussian09/Gaussian16
------------------------------------------------------------------------------------------

#Step 1 = input for antechamber (step 1 in generating resp charges according to Amber antechamber- Amber 18 manual page 283) 

antechamber -i lig_h.pdb -fi pdb -o lig_h.com -fo gcrt -gv 1 -ge lig_h.gesp -dr n -pf y

*Note: update the functional to at least b3lyp/6-31g** for partial charge calculations
________________________________________________________________________________________
-gv option allows generation of the gesp file.
-ge  gaussian esp file generated by iop(6/50=1), default is g09.gesp
-pf choosing 'y' removes intermediate files 

#Must have the following IOP for the Gaussian input file generate by the line above:
	HF/6-31G* SCF=tight Test Pop=MK iop(6/33=2) iop(6/42=6) opt
	 iop(6/50=1)

	 #iop(6/33=2) makes Gaussian write out the potential points and potentials (do not change)
	 #iop(6/42=6) gives the density of points in each layer. A value of 17 gives about 2500 points atom. Lower values may be needed for large molecules, since the programs cannot normally handle more than 100 000 potential points. A value of 10 gives about 1000 points/atom.
	 #iop(6/50=1) Whether to write Antechamber file during ESP charge fitting. (0 is default for NO and 1 is YES)
	 #Pop=MK produces charges to fit electrostatic potential at points selected based on Merz-Singh-Kollman scheme. Same as Pop=ESP (Amber uses RESP, so this scheme is used for consistency)

...and it should end with the name of the gesp file you want to save at the end of the coordinates:
    H   84.8740000000      126.3740000000      106.6920000000     
    H   85.0710000000      124.7080000000      107.2850000000     

lig_h.gesp

lig_h.gesp
___________________________________________________________________________________________________

#Step 2 = use the gesp file generated from step 1 to get the mol2 file
-eq stands for equalizing atomic charge (usually set to 1 - by atomic paths method- for resp and bcc)

antechamber -i lig_h.gesp -fi gesp -o lig_h.mol2 -fo mol2 -c resp -dr n -eq 2 -pf y -an n -at gaff2 -seq n

*Note: Alternatively one could use the Gaussian log file (gout = gaussian output) from RESP charge calculation to generate the mol2 file:

antechamber -i lig_h.log -fi gout -o lig_h.mol2 -fo mol2 -c resp -dr n -eq 2 -pf y -an n -at gaff2 -seq n

*Note: The atom names (col#2) in the mol2 file will have to be changed to be consistent with PDB atom names before moving on to Step #3. 
___________________________________________________________________________________________________

#Step 3- generate the prepi file from the mol2 file in antechamber and the frcmod file using the parmchk2 program
	Make sure for all these antechamber protocols that the ac doctor is off (-dr n)

antechamber -i lig_h.mol2 -fi mol2 -o lig_h.prepi -fo prepi -dr n -pf y (##change the atom names in mol2 to match PDB)
#NOTE: prepi files are notorious in changing the atom order and the the atom names even if the mol2 has the same order and names as in PDB! So use option #2 for frcmod calculation

parmchk2 -i lig_h.prepi -o lig_h.frcmod -f prepi -dr n -pf y

Alternatively, if prepi file is not needed then (typically when not using TAO):

parmchk2 -i lig_h.mol2 -o lig_h.frcmod -f mol2 -dr n -a Y -s 2 -pf y
__________________________________________________________________________________________________

#Step 4 - Generating off file to be used in the LEaP preparation of the system (most important for ligands being used). This is the BEST alternative to prepi needed for protein+ligand leap prep

source leaprc.gaff
loadamberparams lig_h.frcmod
mol = loadmol2 lig_h.mol2
check mol
saveoff mol lig_h.off
quit

*Note: The lig_h.off (or lig_h.lib) will be used in the protein+ligand tleap prep. It is called when loading ligand parameters (such as force field modification/ .frcmod file) by 'loadOff lig_h.off'.
